Place your design document here.


In our design, every progress has its own file descriptor table. Every descriptor in the file descriptor table can point to a open-file in the global open file table. Open-file is a struct which includes flags, off_t offset(the offset of the file), refCount(reference count), filelock (a lock pointer), vNode(a pointer which points to vnode).

We also have a global "open file table" (which is actually the array of open_file that we defined in file.c).



=================================================================
void init_fdesc(void);

init_fdesc is the function to initialization of the file descriptor table. It will be called in runprogram.c
Init stdout and stderr, link them to console "con:", create struct openFile for them.
Except for basic intialization of the file descriptor table, We also call vfs_open for standard output and standard error here.


=================================================================
int sys_open(const_userptr_t file, int flag, mode_t mode, int32_t* retval);

This function is the system open implementation.
In this function, we will do:
1. Check the exception case. 
2 .Call the copyinstr to copy the string to kernel space.
3. Find available place in file descriptor table
4. Find available place in open file table
5. Call vfs_open to open the file
6. Update the information in the open file node
7. Connect the file descriptor to open_file_node


=================================================================
int sys_close(int handle, int32_t * retval);

This function is the system close implementation.
In this function, we will do:
1. Check the exception case. 
2. Free the file descriptor
3. Decrease the reference account
4. After decreasing, check whether the reference count is zero. If it is, we call vfs_close.

=================================================================
int sys_read(int handle, void * buf, size_t len, int32_t * retval);

This function is the system read implementation.
In this function, we will do:
1. Check the exception case.
2. Call uio_kinit function for uio configuration.
3. Call the VOP_READ function
4. If "error", we just return "error" code. If not, we update the offset and the retval and return 0.

=================================================================
int sys_write(int handle, void * buf, size_t len, int32_t * retval);

This function is the system write implementation.
In this function, we will do:
1. Check the exception case.
2. Get the open file node
3. Call the copyinstr to copy the string to kernel space.
4. Call uio_kinit function for uio configuration.
5. Call the VOP_READ function
6. If "error", we just return "error" code. If not, we update the offset and the retval and return 0.

=================================================================
int sys_dup2(int old_handle, int new_handle, int32_t* retval);

Firstly, we check the exception case. If it is, we throw the exception.
Secondly, we check whether the old_handle and new_handle is the same one. If they are, we don't need to any more things, so just return.
Then we check whether the destination in the file descriptor tabel already exists. If it is, we need to decrease the reference count for the open file. If the reference count is zero after decreasing, we close the file.
After, we make the new file descriptor point to the open file as the old file descriptor does.
Finally, we finish our dupplication.

=================================================================
int sys_lseek(int fd, off_t pos, int whence, off_t* retval);

This function is the system lseek implementation.
Before this function called, we need to deal with our parameters, because off_t is 64 bits. But our machine is 32 bit, so we need to do the transformation. Joint a2 and a3 to 64 bits, off_t. And get whence from the stack.
After this function finished, we also transfer our results to two 32 bits register v0 and v1.

In this function, we will do:
1. Check the exception case, including checking whether it is seekable or not.
2. Called VOP_STAT() to get the information of the file.
3. Check the value of whence and finish the following steps accoring to different values.
4. Update our offset of the file according to the check of step 3.
5. Update the retval.






